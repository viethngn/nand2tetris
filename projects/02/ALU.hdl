// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //Put you code here:
    //zx and nx
    Mux16(a = x, b[0..15] = false, sel = zx, out = x0);
    Not16(in = x0, out = notx);
    Mux16(a = x0, b = notx, sel = nx, out = finx);

    //zy and ny
    Mux16(a = y, b[0..15] = false, sel = zy, out = y0);
    Not16(in = y0, out = noty);
    Mux16(a = y0, b = noty, sel = ny, out = finy);

    //f
    Add16(a = finx, b = finy, out = sum);
    And16(a = finx, b = finy, out = w0);
    Mux16(a = w0, b = sum, sel = f, out = w1);

    //no
    Not16(in = w1, out = nw1);
    Mux16(a = w1, b = nw1, sel = no, out = fout, out[0..7] = o1, out[8..15] = o2);

    //zr
    Or8Way(in = o1, out = h1);
    Or8Way(in = o2, out = h2);
    Or(a = h1, b = h2, out = h);
    Not(in = h, out = zr);

    //ng
    And16(a = fout, b[0..15] = true, out[0..14] = na, out[15] = ng);

    //out
    Or16(a = fout, b[0..15] = false, out = out);
}